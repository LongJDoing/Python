#coding=utf-8
'''
Created on 2014��5��22��

@author: Administrator
'''
#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.5 (standalone edition) on Thu May 22 09:39:05 2014

import wx

# begin wxGlade: extracode
# end wxGlade

import extra_var
import myimportimg

class MyFrame1(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame1.__init__
        kwds["style"] = wx.CAPTION | wx.CLOSE_BOX | wx.SYSTEM_MENU | wx.FRAME_TOOL_WINDOW
        wx.Dialog.__init__(self, *args, **kwds)
        self.list_ctrl_1 = wx.ListCtrl(self, -1, style=wx.LC_REPORT)
        self.list_ctrl_1.InsertColumn(0, u'序号')
        self.list_ctrl_1.InsertColumn(1, u'类名')
        self.list_ctrl_1.SetColumnWidth(0, 130)
        self.list_ctrl_1.SetColumnWidth(1, 130)

        self.button_1 = wx.Button(self, -1, u"添加")
        self.text_ctrl_1 = wx.TextCtrl(self, -1, u'等待...')
        self.button_2 = wx.Button(self, -1, u"右移")
        self.sizer_6_staticbox = wx.StaticBox(self, -1, u"导入")
        self.list_ctrl_2 = wx.ListCtrl(self, -1, style=wx.LC_REPORT)
        self.list_ctrl_2.InsertColumn(0, u'序号')
        self.list_ctrl_2.InsertColumn(1, u'类名')
        self.list_ctrl_2.SetColumnWidth(0, 130)
        self.list_ctrl_2.SetColumnWidth(1, 130)
        
        self.button_3 = wx.Button(self, -1, u"左移")
        self.button_4 = wx.Button(self, -1, u"确定")
        self.sizer_4_staticbox = wx.StaticBox(self, -1, u"结果")
               
        self.__set_properties()
        self.__do_layout()
        self.Show()
        # end wxGlade
        self.list_ctrl_1.Bind(wx.EVT_MOTION, self.OnMotion,self.list_ctrl_1)
        #self.list_ctrl_1.Bind(wx.EVT_LEFT_UP, self.OnLeftUp,self.list_ctrl_1)
        self.list_ctrl_1.Bind(wx.EVT_LEFT_DOWN, self.OnLeftDown,self.list_ctrl_1)
        self.list_ctrl_1.Bind(wx.EVT_KEY_DOWN, self.OnkeyDown, self.list_ctrl_1)
        self.list_ctrl_1.Bind(wx.EVT_KEY_UP, self.OnkeyUp, self.list_ctrl_1)

        self.list_ctrl_2.Bind(wx.EVT_MOTION, self.OnMotion,self.list_ctrl_2)
        #self.list_ctrl_1.Bind(wx.EVT_LEFT_UP, self.OnLeftUp,self.list_ctrl_1)
        self.list_ctrl_2.Bind(wx.EVT_LEFT_DOWN, self.OnLeftDown,self.list_ctrl_2)
        self.list_ctrl_2.Bind(wx.EVT_KEY_DOWN, self.OnkeyDown, self.list_ctrl_2)
        self.list_ctrl_2.Bind(wx.EVT_KEY_UP, self.OnkeyUp, self.list_ctrl_2)


        self.button_1.Bind(wx.EVT_BUTTON, self.OnOpenIm, self.button_1)
        self.text_ctrl_1.Bind(wx.EVT_TEXT, self.GetTrainerfilename, self.text_ctrl_1)
        self.list_ctrl_1.Bind(wx.EVT_LIST_COL_CLICK, self.OnColClick, self.list_ctrl_1)
        self.list_ctrl_1.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnSelectMustHave, self.list_ctrl_1)
        
        self.list_ctrl_2.Bind(wx.EVT_LIST_COL_CLICK, self.OnColClick, self.list_ctrl_2)
        self.list_ctrl_2.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnSelectMustHave1, self.list_ctrl_2)

        self.button_2.Bind(wx.EVT_BUTTON, self.OnMoveRight, self.button_2)
        self.button_3.Bind(wx.EVT_BUTTON, self.OnMoveLeft, self.button_3)
        self.button_4.Bind(wx.EVT_BUTTON, self.OnAccept, self.button_4)
    # 键盘操作    
    def OnkeyDown(self,event):
        if (event.GetKeyCode() == wx.WXK_ALT) and extra_var.mouseleft:
            #print "yes"
            num_items = self.list_ctrl_1.GetItemCount()
            items =[]
            for index in xrange(num_items):
                self.list_ctrl_1.Focus(index)
                self.list_ctrl_1.Select(index)
                items.append(index)
            map(lambda x:self.list_ctrl_1.SetItemBackgroundColour(x,wx.WHITE) ,set(items))
        if event.GetKeyCode() == wx.WXK_CONTROL_A:
            print "no"
            extra_var.ctrlkey = True
        event.Skip()

    
    def OnkeyUp(self,event):
        if event.GetKeyCode() == wx.WXK_CONTROL:
            extra_var.ctrlkey = False
        event.Skip()

    def OnLeftDown(self,event):
        extra_var.mouseleft = True
        event.Skip()
    
    #=======wx中出现了问题，鼠标左键的响应和双击一样====================================================
    # def OnLeftUp(self,event):
    #     extra_var.mouseup = True
    #     print "use"
    #     event.Skip()   
    #===========================================================================
         
    def OnMotion(self, event):
        #print "use"
        extra_var.mousemove = True
        event.Skip()
   
    #导入一个路径下的所有类别文件夹
    def OnOpenIm(self, event):

        extra_var.trainfilename = myimportimg.GetPath()
        directory = myimportimg.getsubdirectory(extra_var.trainfilename)
        #print repr(extra_var.trainfilename)
        for i in xrange(1, len(directory)):
            
            text = directory[i].split('\\')
            name = text[len(text)-1]
            #print name
            extra_var.alltrainer[i-1] = [i-1, directory[i], name]
        #print extra_var.alltrainer
        items = extra_var.alltrainer.items()
        index = 0
        for key, data in items:
            #print key
            self.list_ctrl_1.InsertStringItem(index, str(data[0]))
            self.list_ctrl_1.SetStringItem(index, 1, data[2])
            self.list_ctrl_1.SetItemData(index, key)
            index += 1
               
    def GetTrainerfilename(self, event):
        text = self.text_ctrl_1.GetValue()
        try:
            index = self.list_ctrl_1.GetFocusedItem()
            self.list_ctrl_1.SetStringItem(index, 1, text)
            #print extra_var.alltrainer[index][2]
            extra_var.alltrainer[index][2] = text
        except:
            print u"请选择需要修改名称的一类"
            event.Skip()
    
    # 为list ctrl 设置多选
    def OnColClick(self, event):
        print "column clicked"
        event.Skip()  
        
    def OnSelectMustHave(self,event):  
                
        #print not extra_var.mouseleft,extra_var.ctrlkey,not extra_var.mouseup , extra_var.mousemove
        if (extra_var.mouseleft and extra_var.ctrlkey) or (extra_var.mousemove):
            info = event.GetData()
            if info in extra_var.choosetrainer:
                #print info
                extra_var.choosetrainer.remove(info)
            #print info
            else:
                extra_var.choosetrainer.append(info)
            #extra_var.choosetrainer = list(set(extra_var.choosetrainer))
            #print extra_var.choosetrainer
            #print len(extra_var.choosetrainer)
            num_items = self.list_ctrl_1.GetItemCount()
            items =[]
            for i in xrange(num_items):
                items.append(i)
            map(lambda x:self.list_ctrl_1.SetItemBackgroundColour(x,wx.WHITE) ,set(items))
            map(lambda x:self.list_ctrl_1.SetItemBackgroundColour(x,wx.LIGHT_GREY) ,set(extra_var.choosetrainer))
        else:
            event.Skip() 
    
    def OnSelectMustHave1(self,event):  
                
        #print not extra_var.mouseleft,extra_var.ctrlkey,not extra_var.mouseup , extra_var.mousemove
        if (extra_var.mouseleft and extra_var.ctrlkey) or (extra_var.mousemove):
            info = event.GetData()
            if info in extra_var.inversechoosetrainer:
                #print info
                extra_var.inversechoosetrainer.remove(info)
            #print info
            else:
                extra_var.inversechoosetrainer.append(info)
            #print extra_var.inversechoosetrainer
            num_items = self.list_ctrl_2.GetItemCount()
            items =[]
            for i in xrange(num_items):
                items.append(i)
            map(lambda x:self.list_ctrl_2.SetItemBackgroundColour(x,wx.WHITE) ,set(items))
            map(lambda x:self.list_ctrl_2.SetItemBackgroundColour(x,wx.LIGHT_GREY) ,set(extra_var.inversechoosetrainer))
        else:
            event.Skip() 
            
    def OnMoveRight(self, event):
        
        # 给list ctrl 2增加内容        
        items = extra_var.alltrainer.items()
        index = 0
        extra_var.choosetrainer = sorted(extra_var.choosetrainer, reverse=False)
        for x in extra_var.choosetrainer:
            ind = self.list_ctrl_1.GetItemText(x,0)
            ind = int(ind)
            data = items[ind][1]
            self.list_ctrl_2.InsertStringItem(index, str(data[0]))
            self.list_ctrl_2.SetStringItem(index, 1, data[2])
            self.list_ctrl_2.SetItemData(index, index)

            index += 1  
        
        num_items = self.list_ctrl_2.GetItemCount()
        extra_var.choosetrainer = []
        for i in xrange(num_items):
            ind = self.list_ctrl_2.GetItemText(i,0)
            extra_var.choosetrainer.append(int(ind))
        # 给list ctrl 1控件删除内容
        self.list_ctrl_1.DeleteAllItems()
        index = 0   
        #print extra_var.choosetrainer     
        ind = 0
        for key, data in items:
            if index not in extra_var.choosetrainer:
                self.list_ctrl_1.InsertStringItem(ind, str(data[0]))
                self.list_ctrl_1.SetStringItem(ind, 1, data[2])
                self.list_ctrl_1.SetItemData(ind, ind)
                ind += 1
            index += 1

        extra_var.choosetrainer = []
   
    def OnMoveLeft(self, event):
        
        # 给list ctrl 1增加内容        
        items = extra_var.alltrainer.items()
        index = 0
        extra_var.inversechoosetrainer = sorted(extra_var.inversechoosetrainer, reverse=False)
        for x in extra_var.inversechoosetrainer:
            ind = self.list_ctrl_2.GetItemText(x,0)
            ind = int(ind)
            data = items[ind][1]
            self.list_ctrl_1.InsertStringItem(index, str(data[0]))
            self.list_ctrl_1.SetStringItem(index, 1, data[2])
            self.list_ctrl_1.SetItemData(index, index)
            index += 1  
        
        num_items = self.list_ctrl_1.GetItemCount()
        extra_var.choosetrainer = []
        for i in xrange(num_items):
            ind = self.list_ctrl_1.GetItemText(i,0)
            extra_var.inversechoosetrainer.append(int(ind))
        # 给list ctrl 1控件删除内容
        self.list_ctrl_2.DeleteAllItems()
        index = 0   
        #print extra_var.choosetrainer     
        ind = 0
        for key, data in items:
            if index not in extra_var.inversechoosetrainer:
                self.list_ctrl_2.InsertStringItem(ind, str(data[0]))
                self.list_ctrl_2.SetStringItem(ind, 1, data[2])
                self.list_ctrl_2.SetItemData(ind, ind)
                ind += 1
            index += 1

        extra_var.inversechoosetrainer = []
    def OnAccept(self, event):  
        extra_var.choosetrainer = []
        num_items = self.list_ctrl_2.GetItemCount()
        for i in xrange(num_items):
            ind = self.list_ctrl_2.GetItemText(i,0)
            extra_var.choosetrainer.append(int(ind))
        self.Close()
        '''     
        for i in xrange(num_items):
            ind = extra_var.choosetrainer[i]
            print extra_var.alltrainer[ind][1]
        '''
    def __set_properties(self):
        # begin wxGlade: MyFrame1.__set_properties
        self.SetTitle(u"图像训练器")
        self.list_ctrl_1.SetMinSize((266, 410))
        self.button_1.SetMinSize((90, 36))
        self.text_ctrl_1.SetMinSize((92, 24))
        self.text_ctrl_1.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.button_2.SetMinSize((90, 36))
        self.list_ctrl_2.SetMinSize((266, 410))
        self.button_3.SetMinSize((90, 36))
        self.button_4.SetMinSize((90, 36))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame1.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        self.sizer_4_staticbox.Lower()
        sizer_4 = wx.StaticBoxSizer(self.sizer_4_staticbox, wx.HORIZONTAL)
        sizer_10 = wx.BoxSizer(wx.VERTICAL)
        sizer_11 = wx.BoxSizer(wx.HORIZONTAL)
        self.sizer_6_staticbox.Lower()
        sizer_6 = wx.StaticBoxSizer(self.sizer_6_staticbox, wx.HORIZONTAL)
        sizer_7 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_8 = wx.BoxSizer(wx.VERTICAL)
        sizer_9 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_8.Add(self.list_ctrl_1, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_9.Add(self.button_1, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_9.Add(self.text_ctrl_1, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_9.Add(self.button_2, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_8.Add(sizer_9, 1, 0, 0)
        sizer_7.Add(sizer_8, 1, 0, 0)
        sizer_6.Add(sizer_7, 1, wx.EXPAND, 0)
        sizer_2.Add(sizer_6, 1, wx.EXPAND, 0)
        sizer_10.Add(self.list_ctrl_2, 0,  wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_11.Add(self.button_3, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_11.Add((92, 36), 0, 0, 0)
        sizer_11.Add(self.button_4, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_10.Add(sizer_11, 1, wx.EXPAND, 0)
        sizer_4.Add(sizer_10, 1, 0, 0)
        sizer_2.Add(sizer_4, 1, wx.EXPAND, 0)
        sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        self.Layout()
        # end wxGlade

# end of class MyFrame1
'''
if __name__ == "__main__":
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    frame_1 = MyFrame1(None, -1, "")
    app.SetTopWindow(frame_1)
    frame_1.Show()
    app.MainLoop()
'''